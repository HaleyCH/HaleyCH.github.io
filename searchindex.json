[{"section":"Blog","slug":"/blog/nintendo-switch-simulator/","title":"Nintendo Switch Simulator","description":"A step-by-step guide on how to set up and use the Nintendo Switch Simulator using ESP-32, STM32, or CH32 development boards.","date":"August 28, 2023","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308281657027.JPG\"\n    alt=\"\"\n    class=\" img\"\n    height=\"\"\n    width=\"420\" /\u003e\n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308281657027.JPG\"\n    alt=\"\"\n    class=\" img\"\n    height=\"100\"\n    width=\"100\" /\u003e\n","searchKeyword":"","categories":"游戏, DIY, 教程","tags":"Nintendo Switch, Simulator, ESP-32, STM32, CH32","content":" 目录 1 前言 2 准备工作 2.1 下载整合包 2.2 购买对应的开发板 2.2.1 ESP-32 2.2.2 其他 2.3 安装驱动 2.4 烧录固件 3 使用EasyCon 3.1 下载EasyCon并使用 3.2 EasyCon语法介绍 按键 摇杆 等待 注释 输出 消息推送 循环 常量与变量 赋值 含变量的基础语句 条件分支 4 部分脚本 5 进阶操作 6 结语 Note\n本教程需要你拥有一张ESP-32、STM32或者CH32开发板。并且本文只基于ESP-32进行讲解。\n1 前言 本文只是一个粗浅的教程，详细可以加QQ群946057081讨论。\n在开始正文前，我想先列举一下我尝试过的方案。\nNXBT :这是目前最火的项目，但是它要求使用树莓派或者linux系统的PC。\n树莓派太贵，所以我没采用。\n之后我又折腾过 WSL、VMWare、VirtualBox，但是都没成功。\nVMWare是我最接近成功的一次，有兴趣各位可以试试。\n而且此项目年久失修，我估计switch到16.0固件以后就没法用了。 NintendoSwitchController : 纯日语项目，很不友好，需要Arduino Leonardo，贵。 EasyCon ：本文主角。支持多种单片机，价格控制在50元人民币以内，可以自制脚本，接上采集卡还能使用图像识别（采集卡要另外买，差不多200来块），功能强大。 2 准备工作 2.1 下载整合包 首先，你需要下载整合包。\n这里我提供了交流群中2022年12月更新的文件：\nESP-32 STM32 CH32 点击下载ESP32整合包 点击下载STM32整合包 点击下载CH32整合包 你可以根据自己的需求选择下载不同的文件。\n2.2 购买对应的开发板 建议根据下载的整合包里的PDF文件购买开发板。\n2.2.1 ESP-32 我使用的是ESP-32。\nNote\n请注意不要购买ESP32-Cx、 ESP32-Sx型号。\n并且最好购买带有`cp2102关键字的开发版。\n薄膜键盘可以不用买，但是数据线一定要买，是比较老的那种接口，具体可以问客服。\n针脚可以联系客服让厂商帮你焊好（不焊也可以用）。\n这里是我的购买截图 2.2.2 其他 请参考整合包中PDF文件进行购买。\n2.3 安装驱动 如果整合包中包含驱动，则安装驱动，\n若无，直接进行下一步。\n2.4 烧录固件 所有的整合包中都包含EasyCon固件以及烧录文件，你可以直接烧录。\n下面我将以ESP-32为例进行讲解。\n1、 启动烧录程序。点击烧录程序后，选择ESP32，然后点击OK。\n你应该会看到如图所示界面 2、 点击...，选择整合包中的固件，并选中。在后方的地址输入 0x0。并选择正确的串口。\n3、 点击start\n出现如图所示的界面代表烧录成功 3 使用EasyCon 3.1 下载EasyCon并使用 你可以在这里 找到对应文件。\n下载并解压他们。\n打开后你会看到这样的界面。\n点击自动连接即可与开发版连接。\n3.2 EasyCon语法介绍 按键 语法：键位 [持续时间(ms)|DOWN|UP] 示例：A（按下A键50毫秒）、HOME 1000（按下Home键1秒）、LEFT DOWN（按住左十字键，需要手动用LEFT UP松开） 全部按键：A、B、X、Y、UP、DOWN、LEFT、RIGHT、MINUS、PLUS、L、R、ZL、ZR、HOME、CAPTURE。 摇杆 语法： LS|RS 方向|角度 [, 持续时间(ms)] LS|RS RESET LSS|RSS 方向 (1.45新增慢推语法，仅支持方向，不支持角度) 等待 语法：[WAIT] 等待时间(ms) 示例：WAIT 500、2000 注释 语法：# 注释内容 注意：多写注释是个好习惯，尤其是分享脚本给别人的时候。 输出 语法：PRINT 输出内容 注意：联机模式专用，在控制台显示文字。 消息推送 语法：ALERT 输出内容 注意：联机模式专用，发送推送消息，基于推送加服务。需要先关注\u0026lt;pushplus推送加\u0026gt;小程序生成token并在设置-\u0026gt;推送设置页面配置。 循环 语法： FOR [循环次数]\n\u0026hellip;\nNEXT 常量与变量 常量语法：常量名 = 值 变量基础语法：$索引 变量进阶语法：$变量名、$$变量名 赋值 语法：目标变量 = 值 或 目标变量 = 来源变量 含变量的基础语句 输出：PRINT 用\u0026amp;分隔的输出内容 按键：键位 变量名 摇杆：LS|RS 方向|角度 变量名 等待：WAIT 变量名 条件分支 语法： IF 条件\n\u0026hellip;\nELSE \u0026hellip; ENDIF 4 部分脚本 自动刷活动 Note\n需要不在同行第一只宝可梦放刷活动用宝可梦，并且该宝可梦第一个技能应该为需要使用的技能。\n使用时，需连接网络，并进入联机太晶对战界面再运行脚本。\n此外，还需要将捕捉用的精灵球选择为普通球（否则太浪费）并且买999个。\nFOR X 100 WAIT 100 A 100 WAIT 100 NEXT 自动取孵 #1.语速调到最快，关闭取名，关闭学技能，自动记录最好关闭 #2.将【园模镇：西】标记为目的地，并打开原地旋转模式 #3.同行携带要生蛋的两只宝可梦 #4.将盒子打开的界面调成将要放蛋的第一个空箱子 #5.放蛋的空箱子的前一个箱子第一列空出来，第二列只放火焰之躯宝可梦【孵蛋用】 #6.菜单界面光标默认调到野餐，脚本开始时人物退出盒子，退出菜单，并骑上神兽 #7.初始站位需站在园模镇橄榄球场远离可梦中心球筐左侧，面朝宝可梦中心，球筐在右侧 #8.默认20周期的，孵其他宝可梦，孵蛋时间需自行调节，料理位置按自己的配方调整 #9.部分延时为防止卡顿，加的时间有点长，可自行修改，如果野餐不成功，请重新开始即可 #10.by 倚夏\u0026amp;law 宝可梦取孵一体脚本2.86【圆模镇】(往复式孵蛋) #【※※※※运行前清修改数值※※※※】 #======初始数值调整【必看】====== _孵蛋箱数 = 1 #需自行计算箱数，一次料理54+颗蛋左右【一次料理，孵蛋两箱，约1.5小时】 _孵蛋周期 = 25 #直接填写孵蛋宝可梦的孵蛋周期，可看下方的周期表 _料理次数 = 4 #一次料理54颗蛋左右，根据料理次数换算成你要孵蛋的箱数 _料理位置 = 8 #就是17号配方【超级花生酱三文治】在第几行 _料理左右 = 0 #就是17号配方【超级花生酱三文治】在 0左 还是 1右 _跳过野餐 = 1 #1开启，不进行野餐直接孵蛋，初始站位不变，并将光标放到孵蛋的第一箱第一个蛋，同行只有一只孵蛋用宝可梦 _蛋蛋力LV3 = 1 #1开启，将制作蛋蛋力LV3，需要两个甜味料和一份生菜，一次料理85颗左右 _甜味料位置 = 5 #倒数第几行 #======进阶调整数值【可选】====== _孵蛋延时 = 60 #默认60，如果存在没孵出来的蛋，打开图鉴或者服装，自行加大，每加1延迟孵蛋时间2秒 _拿取延时 = 100 #默认100，改小增大吞键可能性 _按键延迟 = 500 #默认500，按键间隔的延迟 _复位功能 = 1 #1开启 0关闭 _复位周期 = 3 #几箱复位一次 _往对侧 = 3500 #往球场对侧方向行走时间 _往中心 = 1500 #往球场中心方向行走时间 _闪光识别 = 0 #1开启，需用采集卡，并自制标签，烧录需注释【@闪光】 _自动放生闪光识别 = 0 #1开启，需用采集卡，烧录需删除放生代码 #自行按照以下周期选择适合的（周期数据查询神奇百科） #网站：https://wiki.52poke.com/wiki/宝可梦列表（按孵化周期分类） #孵蛋时间有盈余的，会在第一个蛋的界面空转几圈 #5周期= 5 例如鲤鱼王 #10周期=10 例如一对鼠 #15周期=15 例如斗笠菇 #20周期=20 例如小火龙 #25周期=25 例如冰砌鹅 #30周期=30 例如沙河马 #35周期=35 例如伊布 #40周期=40 例如烈咬陆鲨 #函数-------------------------- FUNC POINT #朝向目的地 600 Y 200 2700 B 200 2000 L 100 400 ENDFUNC #函数-------------------------- # 准备阶段 FOR 5 RCLICK 200 NEXT #开始运行 $5 = _跳过野餐 IF $5 = 0 #自动野餐---------------------------------------------------- PRINT 自动野餐开始 CALL POINT LS 270,500 500 LS 270 B 200 WAIT 1500 LS RESET 300 LS 90,2000 200 PLUS 200 300 LS 270,700 CALL POINT PRINT 走到野餐位置，开始野餐 FOR 3 X 50 50 NEXT FOR 5 50 A 100 50 NEXT WAIT 7000 #等待野餐时间 L 500 WAIT 1000 #走到篮子位置 LS UP,200 WAIT _按键延迟 LS LEFT,320 WAIT _按键延迟 LS UP,500 WAIT _按键延迟 LS RIGHT,330 WAIT _按键延迟 LS DOWN,300 WAIT 500 #做料理 $1 = 1 FOR _料理次数 500 PRINT 开始做料理 LS DOWN,200 WAIT _按键延迟 FOR 10 50 A 100 50 NEXT WAIT 5000 #等待选配方界面 $5 = _蛋蛋力LV3 IF $5 = 0 #17号料理 根据料理位置设置次数 PRINT 制作17号料理 $4 = _料理位置 $4 -= 1 FOR $4 LS DOWN,100 100 NEXT $4 = _料理左右 #判定料理配方在左右 IF $4 = 0 #在左 WAIT 100 ELSE #在右 LS RIGHT,100 WAIT 200 ENDIF WAIT _按键延迟 FOR 5 50 A 100 50 NEXT WAIT 8000 #开始做三文治 FOR 3 LS 90,550 100 A DOWN 100 LS 270,525 A UP 100 NEXT #放面包和签子 WAIT 3000 LS UP,550 WAIT _按键延迟 FOR 120 #等三文治转圈画面 50 A 100 50 NEXT $5 = 7 #蛋蛋力LV2拿蛋7轮 $4 = 23 ELSE PRINT 制作蛋蛋力LV3料理 $4 = _甜味料位置 X 200 200 A 200 200 PLUS 200 200 FOR $4 100 UP 100 100 NEXT 200 FOR 2 100 A 100 100 NEXT 200 PLUS 200 200 A 200 WAIT 8000 #等待做料理 LS UP,550 FOR 130 #等三文治转圈画面 50 A 100 50 NEXT $5 = 10 #蛋蛋力LV3拿蛋10轮 $4 = 16 ENDIF 8000 #吃料理时间 A 200 2000 PRINT 吃料理时间 PRINT 吃了 \u0026amp; $1 \u0026amp; 次料理 $1 += 1 LS UP,45 WAIT _按键延迟 # 拿蛋阶段 PRINT 开始拿蛋 $3 = 1 FOR $5 #等待过程中每10秒吹一次口哨 FOR $4 R 200 WAIT 10000 NEXT #连A拿蛋 FOR 52 A 100 WAIT 300 NEXT #连B取消对话框 300 B 100 WAIT 300 B 100 WAIT 300 #循环一次时间5分 PRINT 拿蛋 \u0026amp; $3 \u0026amp; 轮 $3 += 1 NEXT # 返回循环做料理 NEXT PRINT 野餐拿蛋结束 # 结束野餐 2000 FOR 5 50 Y 100 50 NEXT FOR 13 150 A 200 150 NEXT 200 PRINT 开始返回球场 LS 270,200 500 PLUS 600 #返回球场 500 LS 90,1200 #走到栏杆边 200 LS 90 B 300 1000 LS RESET CALL POINT LS 270,1000 #交换工具人---------------------------------------------------- PRINT 交换工具人 500 #拿出孵蛋宝可梦 FOR 3 X 50 50 NEXT 3000 UP 200 FOR 5 50 A 100 50 NEXT 2000 L 200 500 RIGHT _拿取延时 200 Y 200 300 FOR 2 100 LEFT _拿取延时 100 NEXT 300 FOR 2 100 DOWN _拿取延时 100 NEXT 200 A 100 200 UP _拿取延时 300 MINUS 300 FOR 5 UP 50 NEXT 100 A 100 200 RIGHT _拿取延时 200 A 100 200 R 200 500 PRINT 交换已完成 ENDIF #自动孵蛋----------------------------------------------------- $1 = 1 #列数 1为第一列，不要修改 $2 = 1 #已孵蛋箱数 $3 = _孵蛋周期 $3 *= 3 $3 /= 2 $3 += _孵蛋延时 $6 = 1 PRINT 开始孵蛋 FOR _孵蛋箱数 FOR 6 #盒子取蛋 500 MINUS 300 FOR 8 DOWN 50 NEXT 100 A 100 200 DOWN _拿取延时 100 FOR $1 100 LEFT _拿取延时 100 NEXT FOR 3 A 100 100 NEXT FOR 13 50 B 100 50 NEXT 1500 #往复式孵蛋---------------------------- LS 90,_往对侧 FOR $3 FOR 10 LS 90 A 50 NEXT FOR 10 LS 270 A 50 NEXT NEXT LS RESET LS 270,4500 #往复式孵蛋---------------------------- 500 #复位 $5 = _复位功能 IF $5 = 1 IF $6 = _复位周期 IF $1 = 6 $6 = 0 LS 180,100 400 L 100 600 LS 90,2000 500 LS 270,_往中心 600 CALL POINT ENDIF ENDIF ENDIF 500 #宝可梦放回盒子 FOR 3 X 50 50 NEXT FOR 5 50 A 100 50 NEXT 2000 DOWN _拿取延时 300 LEFT _拿取延时 300 #自动放生代码【烧录需删除】-------------------------- $5 = _自动放生闪光识别 $4 = 0 IF $5 = 1 PRINT 开始放生 FOR 5 $5 = @LV IF $5 \u0026lt; 95 BREAK ENDIF $5 = @闪光 IF $5 \u0026gt; 95 PRINT 第 \u0026amp; $2 \u0026amp; 箱第 \u0026amp; $1 \u0026amp; 列出闪了!!! DOWN 100 300 $4 += 1 ELSE FOR $5 = @打开菜单 IF $5 \u0026gt; 95 BREAK ELSE A 100 500 ENDIF NEXT FOR $5 = @放生 IF $5 \u0026gt; 95 BREAK ELSE UP 100 200 ENDIF NEXT FOR $5 = @放生2 IF $5 \u0026gt; 95 BREAK ELSE A 100 1200 ENDIF NEXT FOR $5 = @放生3 IF $5 \u0026gt; 95 BREAK ELSE UP 100 400 ENDIF NEXT FOR $5 = @放生4 IF $5 \u0026gt; 95 A 100 1500 ELSE BREAK ENDIF NEXT ENDIF NEXT IF $4 \u0026gt; 0 FOR $5 = @回到第二行 IF $5 \u0026lt; 95 UP 100 200 ELSE BREAK ENDIF NEXT ENDIF ENDIF #自动放生代码--------------------------\tMINUS 300 #闪光识别代码----------------------------------------------------- FOR 8 $5 = _闪光识别 IF $5 = 1 #烧录模式将下行的代码注释掉，在前面加上【#】即可，无采集卡同理 $5 = @闪光 #烧录需将此行注释，如【#$5 = 闪光】 IF $5 \u0026gt; 95 PRINT 第 \u0026amp; $2 \u0026amp; 箱第 \u0026amp; $1 \u0026amp; 列出闪了!!! ENDIF ENDIF DOWN 100 100 NEXT #闪光识别代码----------------------------------------------------- 300 A 100 FOR 3 UP 100 NEXT 300 FOR $1 100 RIGHT _拿取延时 100 NEXT FOR 3 A 100 100 NEXT FOR 3 B 100 100 NEXT 2000 FOR 3 A 50 NEXT 2000 IF $1 != 6 #换下一列 FOR $1 100 RIGHT _拿取延时 100 NEXT ELSE 200 R 100 300 ENDIF PRINT 第 \u0026amp; $2 \u0026amp; 箱第 \u0026amp; $1 \u0026amp; 列已孵完 $1 += 1 NEXT $2 += 1 $6 += 1 $1 = 1 NEXT PRINT 结束 5 进阶操作 你可以购买一个采集卡，然后自制标签，这样就可以使用图像识别了。\n6 结语 使用EasyCon和相关的开发板为Nintendo Switch玩家提供了一种便捷、经济的方式来自定义并模拟控制器的操作。无论你是希望为特定游戏创建自定义的宏，还是希望进行更复杂的操作，本教程为你提供了开始的基础。\n"},{"section":"Blog","slug":"/blog/build-your-blog-2/","title":"Build Your Blog 2","description":"关于使用Git备份您的站点、使用GitHub Actions自动部署Hugo站点以及为GitHub Pages博客设置自定义域名的逐步指南。","date":"August 28, 2023","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308281503218.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"\"\n    width=\"420\" /\u003e\n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308281503218.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"100\"\n    width=\"100\" /\u003e\n","searchKeyword":"","categories":"技术分享, 博客搭建, 教程","tags":"Hugo, GitHub Pages, GitHub Actions, Custom Domain, Blogging, 博客搭建","content":" 目录 1 前言 2 使用Git与GitHub备份全站 2.1 初始化Git 2.2 配置.gitignore 3 使用GitHub Actions自动部署全站 3.1 创建GitHub Actions 3.2 配置GitHub Secrets 3.3 部署博客 4 （可选）使用自定义域名 5 结语 Note\n本文章是 使用hugo+GitHub Pages搭建免费博客 的续篇。\n下文假设你已经：\n拥有自己的GitHub Pages仓库 安装了hugo并完成有关配置 1 前言 通过这篇文章，你将获得以下方案：\n使用Git与GitHub备份全站 使用GitHub Actions自动部署全站 使用自定义域名 2 使用Git与GitHub备份全站 2.1 初始化Git 在GitHub上创建一个新的private仓库，仓库名为 blogName 。 Warning\n请务必设置为private仓库，否则你的配置文件中的私密信息将会被公开。\n在你的站点目录下执行以下命令：\ngit init git remote add origin \u0026lt;your-repo-url\u0026gt; git add . git commit -m \u0026#34;init\u0026#34; git push -u origin master 2.2 配置.gitignore 在你的站点目录下创建 .gitignore 文件，内容如下：\n/public 这可以防止你的 public 目录被提交到仓库中。\n3 使用GitHub Actions自动部署全站 3.1 创建GitHub Actions 在你的站点目录下创建 .github/workflows/gh-pages.yml 文件，内容如下：\n点击查看配置文件 # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Environment variables available to all jobs and steps in this workflow env: HUGO_ENV: production HUGO_VERSION: \u0026#34;0.115.4\u0026#34; GO_VERSION: \u0026#34;1.20.5\u0026#34; NODE_VERSION: \u0026#34;18.15.0\u0026#34; TINA_CLIENT_ID: ${{ vars.TINA_CLIENT_ID }} TINA_TOKEN: ${{ vars.TINA_TOKEN }} jobs: # Build job build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Set up Node.js uses: actions/setup-node@v3 with: node-version: ${{ env.NODE_VERSION }} - name: Install Hugo run: | curl -LO \u0026#34;https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_Linux-64bit.tar.gz\u0026#34; tar -xvf hugo_extended_${{ env.HUGO_VERSION }}_Linux-64bit.tar.gz sudo mv hugo /usr/local/bin/ rm hugo_extended_${{ env.HUGO_VERSION }}_Linux-64bit.tar.gz hugo version - name: Install Go run: | curl -LO \u0026#34;https://dl.google.com/go/go${{ env.GO_VERSION }}.linux-amd64.tar.gz\u0026#34; sudo tar -C /usr/local -xzf go${{ env.GO_VERSION }}.linux-amd64.tar.gz echo \u0026#34;export PATH=$PATH:/usr/local/go/bin\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV rm go${{ env.GO_VERSION }}.linux-amd64.tar.gz go version - name: Setup Project run: npm run project-setup - name: Install npm dependencies run: npm install - name: Build Website run: npm run build - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public - name: Echo CNAME run: echo ${{ secrets.CNAME }} \u0026gt; ./public/CNAME - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: ${{ secrets.PAGE_URL }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 仔细观察代码，你会发现有一些变量需要你自己填写。\n3.2 配置GitHub Secrets 在你的仓库中，点击 Settings -\u0026gt; Secrets -\u0026gt; New repository secret ，添加以下变量：\nPERSONAL_TOKEN\n这是你的GitHub Personal Token，用于推送到仓库中。\n点击这里 获得你的Token。 PAGE_URL\n这是你的GitHub Pages仓库的URL，格式应该为 username.github.io 。 CNAME(可选)\n这是你的自定义域名，格式应该为 example.com 。 点击查看示例 3.3 部署博客 观察GitHub Actions的配置文件，你会发现，只有在main分支提交时，才会触发自动部署。\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] 因此，我们需要将静态文件推送到main分支中就能完成部署。\ngit add . git commit -m \u0026#34;init\u0026#34; git push origin main 或者在GitHub网页中编辑完文章后，点击Commit changes按钮。\n这样，你应该就能在username.github.io中看到你的博客了。\n4 （可选）使用自定义域名 如果你想要绑定域名，可以在 GitHub Pages 的设置中，将 Custom domain 设置为你的域名。\n此外，你还需要在你的域名服务商中，添加一条 CNAME 记录，将 yourCustom.domain 指向你的博客域名username.github.io。 Tip\n有时，你或许需要在你的域名服务商中，添加一条 A 记录，将 yourCustom.domain 指向 GitHub对应的IP地址。\n这样你就可以通过yourCustom.domain访问你的博客了。\n5 结语 至此，你的博客就已经可以自动部署了。\n下一篇文章中，我将分享我将博客文章图片托管至OSS的方案。\n"},{"section":"Blog","slug":"/blog/build-your-blog-1/","title":"Build Your Blog 1","description":"本文介绍了如何使用hugo、如何配置hugo，并讲解了如何使用GitHub Pages搭建免费博客。","date":"August 28, 2023","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308281329993.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"\"\n    width=\"420\" /\u003e\n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308281329993.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"100\"\n    width=\"100\" /\u003e\n","searchKeyword":"","categories":"技术分享, 博客搭建, 教程","tags":"hugo, GitHub Pages, 博客搭建, Go","content":" 目录 1 前言 2 安装hugo 3 配置hugo与挑选主题 4 使用GitHub Pages部署免费博客 4.1 创建GitHub Pages 4.2 部署博客 4.3 （可选）绑定域名 5 结语 1 前言 Note\n注意：我并不推荐这套方案，比起这套方案，hexo + GitHub Pages有着更加完善的生态。\n如果说是使用托管服务搭建博客的话，其实我并不是很建议 hugo 。\nhugo 相较于 hexo 来说，配置起来比较麻烦，而且 hugo 的主题插件也比较少。\n它的优势在哪呢？它的唯一优势是生成速度快。但是既然都使用托管服务了，那么生成速度就不在我们的考量中。\n那么为什么我还是使用 hugo 呢？\n单纯是因为我一开始是想部署到自己服务器上的，后来才发现部署到 GitHub Pages 上更方便。\n2 安装hugo 首先安装 Go。\nmacOS Linux Windows brew install go sudo apt install golang-go 下载地址 安装完成后，执行 go version 查看是否安装成功。\n接下来去GitHub的release页面下载 hugo 的二进制文件。\n下载地址 或者，如果你使用的是 MacOS ，可以直接使用 brew 安装。\nbrew install hugo 根据 README.md 安装即可。\n安装完成后，使用 hugo new site blogName 创建一个新的站点。\n3 配置hugo与挑选主题 Note\n每个主题的配置文件都略微有区别，本文只挑选共性的部分进行讲解。\n我使用的是 hugoplate 主题，其他主题也大同小异。\n你可以在这里 挑选你喜欢的主题。\n并按照它的文档进行安装。\n安装完主题后，我们需要配置 config.toml 文件。\n（在 hugoplate 主题中，配置文件是 hugo.toml ，其他主题可能是 config.toml ）\n首先我们按照需求填写基本信息。 baseURL 部分可以等创建完GitHub Pages后再进行填写。\nbaseURL = \u0026#34;https://hluvmiku.tech\u0026#34; # Title of your website (required). title = \u0026#34;HaleyCH\u0026#39;s Blog\u0026#34; # Your theme name theme = \u0026#34;hugoplate\u0026#34; # Default time zone for time stamps; use any valid tz database name: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List timeZone = \u0026#34;Asia/Shanghai\u0026#34; 其中theme修改为你使用的主题名称。\nNote\n请务必配置 baseURL ，否则你的网站将无法正常访问。\n下方内容按需配置：\n配置语言与多国语 Tip\n不建议使用多国语言，虽然hugo原生支持多国语言，但是多国语生成的sitemap会不被某些搜索引擎接受。\n在 hugoplate 主题中，语言与目录配置文件在 config/_default 目录下。\n若要支持多国语，只需修改 languages.toml 文件即可。\n################ English language ################## [en] languageName = \u0026#34;english\u0026#34; languageCode = \u0026#34;en\u0026#34; contentDir = \u0026#34;content/en\u0026#34; weight = 1 ################ Chinese language ################## # [zh] # languageName = \u0026#34;中文\u0026#34; # languageCode = \u0026#34;zh\u0026#34; # contentDir = \u0026#34;content/en\u0026#34; # weight = 1 其中languageCode为语言代码，contentDir为语言对应的内容目录。\n他们分别同目录下的menus.en.toml和 content 目录下的 en 目录对应。\n若要修改目录对应的翻译，则需修改对应语言的 menus.toml 文件。\n如果有i18n目录，则需修改 i18n 目录下对应语言的 toml 文件。\n定制你的博客 Note\n这一块不同主题差距比较大，我只我对 hugoplate 主题的配置为例。\n我先对config/_default目录下params.torml文件进行配置。\nfavicon = \u0026#34;images/favicon.png\u0026#34; # 网站图标 logo = \u0026#34;\u0026#34; # logo 由于我没有，故为空。 logo_darkmode = \u0026#34;\u0026#34; # theme-mode theme_switcher = true theme_default = \u0026#34;system\u0026#34; # available options [light/dark/system] copyright = \u0026#34;Made with ❤️ by Haley.\u0026lt;br\u0026gt;Since 2023\u0026#34; # copyright 以上是基础的网站信息配置，下面是一些SEO配置。\n# seo meta data for OpenGraph / Twitter Card [metadata] keywords = [\u0026#34;technology\u0026#34;, \u0026#34;blog\u0026#34;] description = \u0026#34;Hugo \u0026amp; Tailwindcss Starter\u0026#34; author = \u0026#34;HaleyCH\u0026#34; image = \u0026#34;images/og-image.png\u0026#34; 接下来，根据主题中使用的插件不同，可能在data目录下也会有部分配置，这部分我不做讲解。\n此外，如果你想要修改主题的样式，可以在 assets 目录下进行修改。\n定制化你的文章 在 hugo 中，文章通过 hugo new 命令创建。\nhugo new posts/your-post-name.md 这样就创建了一篇文章，文章的内容在 content/posts/your-post-name.md 中。\n它会查看 archetypes 目录下的 default.md 文件，将其内容执行并复制到新建的文章中。\n下面是一个例子：\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true --- 我将会另外写一篇文章讲解利用 hugo 的 archetypes 实现类似 hexo 的 abbrlink 功能。\n4 使用GitHub Pages部署免费博客 4.1 创建GitHub Pages 首先，我们需要创建一个仓库，仓库名必须为 username.github.io ，其中 username 为你的用户名。\n这样，GitHub Pages就会自动为你创建一个网站。\nNote\n现在GitHub Pages已经可以在所有仓库中创建了，但是我还是建议使用 username.github.io 的方式。\n因为这样可以不用自己申请域名。\n你可以在这里查看GitHub Pages配置情况 4.2 部署博客 首先，我们需要在本地生成静态文件。 hugo 这样就会在 public 目录下生成静态文件。 2. 接下来，我们需要设置远程仓库。\ncd public git init git remote add origin git pull origin master 最后，我们将静态文件推送到远程仓库。 git add . git commit -m \u0026#34;init\u0026#34; git push origin master 在 GitHub Pages 的设置中，将 Source 设置为 master branch 。 等待一段时间后，你的博客就会部署成功了。访问地址为 https://username.github.io 。 4.3 （可选）绑定域名 如果你想要绑定域名，可以在 GitHub Pages 的设置中，将 Custom domain 设置为你的域名。\n然后，在你的域名服务商中，添加一条 CNAME 记录，将 username.github.io 指向你的域名。 即可完成绑定。\n5 结语 至此，你的博客就已经部署成功了。\n不过它存在以下几点问题：\n操作繁琐，每次写完文章都需要手动执行一系列命令。 备份同步麻烦。 这些问题将会在我的下一篇博客中解决。\n在下一篇博客中，我将详细讲解利用GitHub Action自动部署的方案，这样你就只需在本地push整个目录，就可以自动部署了。\n"},{"section":"Blog","slug":"/blog/helloworld/","title":"Re:你好，世界","description":"hello world","date":"August 26, 2023","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308272034636.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"\"\n    width=\"420\" /\u003e\n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://cdn.hluvmiku.tech/blog/202308272034636.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"100\"\n    width=\"100\" /\u003e\n","searchKeyword":"","categories":"网站搭建, 技术分享, 生活","tags":"hello world","content":" 目录 原来的博客发生了什么？ 这是什么？ 封面是什么？ 总之，因祸得福 原来的博客发生了什么？ 长话短说，我不小心把之前博客的数据库删了。\n就单纯是一不小心删除了了数据库文件。\n这是什么？ 这是我用 Hugo 搭建的博客，并使用 Github Actions 自动部署。\n所有图片通过 七牛云 储存，本地上传采用了 PicGO。\n全博客本着能用现成的就不造轮子的宗旨。\n感觉比上一个博客舒服多了，具体流程我会在之后的文章中分享。\n封面是什么？ 封面是我无意中翻出去年自己设计的第一款鼠标垫的私货款式，因为不符合某些要求，最后没做出来。\n总之，因祸得福 这是我的第六版博客。\n自己手写了3版，第一版是Django乱做的，第二版是纯三件套搭的，第三版是用Vue3搭的。\n第四版，也就是之前的博客，是用Hexo搭的，部署在自己服务器上，但是被我手抖删除了。\n在这之后的半年里，我试着用wordpress搭建过博客，不尽如人意，然后我又用Vue3写了一个。\n但是我太懒了，感觉也没提升，就搁置了。\n现在的这一版，我放弃了自己手动搭博客，也懒得再在本地搭了。\n托管在GitHub上，用现成的框架，用OSS储存图片，如果不是因为我第四版博客崩了，我也绝对不会接受这套方案。\n现在感觉这套方案很好🥰。\n"}]